[{"title":"前端学习笔记","url":"/post/91ce7628.html","content":"\n## Before Reading\n\n1. 请点击左下方小框打开目录配合阅读\n2. 只有基础与大致的内容\n3. 大部分参考来自<a href=\"https://www.runoob.com\">菜鸟教程</a>，感谢\n4. 点击可见<a href=\"https://www.runoob.com/cssref/css-colornames.html\">颜色名称表</a>\n\n\n\n***\n\n\n\n[TOC]\n\n<!-- more -->\n\n## HTML\n\nHTML(Hypertext Makeup Language)，即超文本**标记**语言，主要负责网页内容的展示，大小写不敏感。\n\n### 标记\n\n   一般以<标签名>...</标签名>的形式成对出现，自结束标签无需结束符\n\n#### 常见的标签\n\n   * 文档声明[html5]：<!doctype html>放在顶端\n\n   * 网页根标签：`<html>...</html>`\n\n   * `<head>...</head>非用户可见，一般为告诉浏览器属性`\n\n     * head中的标题/浏览器头部标题：`<title>text</title>`\n\n     * HTML文档元数据：`<meta>`,可说明编码类型，描述(discription)，作者(author)等等\n\n       `<meta charset=\"utf-8\">`\n\n       `<meta name=\"author\" content=\"moo1\">`\n\n     * 链接：`<link>`，定义文档与外部资源的关系，空元素，只包含属性，常用于来链接样式表。\n\n       * 属性：\n\n         1. herf：被链接文档的位置\n         2. rel：当前文档与被链接文档之间的关系，<mark>必须</mark>\n         3. type：type 属性规定被链接文档/资源的 MIME 类型。只有当设置了 href 属性时，才能使用该属性。`<link>` 标签常用的 MIME 类型是 \"text/css\"，它规定样式表。\n\n         <a href=\"https://www.runoob.com/tags/tag-link.html\">更多与link属性相关可点击查看。</a>\n\n         \n\n* `<body>...</body>`用户可见，具体内容\n  \n* 标题：`<hn>text</hn>`,n=1~6\n  \n* 段落：`<p>text</p>`\n  \n* 超链接：`<a>text</a>`，一般与herf属性一起使用\n  \n  <a href=\"https://mooyi.xyz\">welcome to mooyi's channel!</a>\n  \n* 换行：`<br>`\n  \n* 粗体：`<b>text</b>`\n  \n     **Atten**:`<strong>text</strong>`也有加粗的效果，但是还表示重要呈现\n   \n* 按钮：`<button>text</button>`\n  \n  <button>text</button>\n  \n* 文档中的节：`<div>text</div>`\n  \n* 文本中的节：`<span>text</span>`\n  \n* 斜体：`<i>text</i>`\n  \n     **Atten**:`<em>text</em>`也有斜体效果，同样表示重要呈现\n   \n* 输入：`<input>`\n  \n* 高亮：`<mark>text</mark>`\n  \n  <mark>text</mark>\n  \n* 下标：`1<sub>text</sub>`\n  \n  1<sub>text</sub>\n  \n* 上标：`1<sup>text</sup>`\n  \n  1<sup>text</sup>\n  \n* 删除线：`<del>text</del>`\n  \n  <del>text</del>\n  \n* 插入/下划线：`<ins>text</ins>`\n  \n  <ins>text</ins>\n\n<a href=\" https://www.runoob.com/tags/ref-byfunc.html\">更多标签可点击查看。</a>\n\n\n\n### 标签属性\n\n  在开始标签中设置，属性是键值对结构(\"key\"=\"value\")\n\n#### 常见属性\n\n   * id(唯一)\n\n   * style:指定行内样式，多个样式以;分隔\n\n     `style=\"color:red;text-align:center\"`\n\n     <p style=\"color:red;text-align:center\">\n         style-showing.\n     </p>\n\n   * title：额外信息/工具条\n\n     `<p><ins title=\"格外信息\">move</ins> on this</p>`\n\n     <p><ins title=\"格外信息\">move</ins> on this</p>\n\n<a href=\"https://www.runoob.com/tags/ref-standardattributes.html\">更多属性可点击查看。</a>\n\n\n\n### 注释\n\n`<!--this is unshown.-->`\n\n\n\n### HTML事件\n\n事件可以触发浏览器行为，与JS联合使用。\n\n表示：`event=\"script()\"`\n\n#### 窗口事件属性(Window Event Attributes)\n\n窗口触发，适用于`<body>`标签\n\n* onresize：调整窗口大小时运行脚本\n\n  `<body onresize=\"Function()\">`\n\n* 文档触发，窗口失焦...\n\n\n\n#### 表单事件(Form Events)\n\n表单中触发，HTML元素需在form表单内。\n\n\n\n#### 键盘事件(Mouse Events)\n\n* onkeydown：按下键盘\n* onkeypress：按下并松开\n* onkeyup：松开按键\n\n\n\n#### 鼠标事件(Mouse Events)\n\n* onclick：单击\n* ondblclick：双击\n* ondrag：拖动元素\n\n...\n\n\n\n#### 多媒体事件(Media Events)\n\n通过视频（videos），图像（images）或者音频（audio） 触发该事件，多应用于 HTML 媒体元素比如 `<audio>, <embed>, <img>, <object>, 和<video>`:\n\n\n\n#### 其他事件\n\n\n\n<a href=\"https://www.runoob.com/tags/ref-eventattributes.html\">更多事件可点击查看。</a>\n\n\n\n其余HTML相关内容可参考https://www.runoob.com/html/html-tutorial.html\n\n\n\n***\n\n\n## CSS\n\nCSS(Cascading Style Sheets)，主要负责网页布局，描述HTML/XML的呈现，即其如何被渲染。\n\n```css\np{\n\tfont-size: 20px;\n\tcolor:red;\n}\n```\n\n&lt;<span style='background-color:red'>p</span>&gt;text&lt;/p&gt;\n\np:选择器\n\nfont-size/color:属性，冒号后为其值\n\n大括号括着的为声明，声明以;结束\n\n\n\n### 选择器\n\n#### id选择器\n\n  以#定义，不以数字开头(避免在Mozilla/Firefox不起作用)\n\n  eg.: <mark>**#test**</mark>{\n\n  ​\ttext-align:center;\n\n  ​\tcolor:red;\n\n  }\n\n  &lt;p <mark>**id=\"test\"**</mark>&gt;text&lt;/p&gt;\n\n#### class选择器\n\n  以.显示，多个用空格区分，类名第一个字符非数字\n\n  eg.:\n\n  <span style=\"background-color:#7FFFD4\">**.center**</span>{\n\n  text-align:center;\n\n  }\n\n  &lt;p <span style=\"background-color:#7FFFD4\">**class=\"center\"**</span>&gt;text&lt;/p&gt;\n\n注释：`/*text*/`\n\n\n\n### 组合选择符\n\n#### 后代选择器\n\n选取某元素的后代元素，以空格` ` 分离。\n\n```html\n<style>\ndiv p\n{\n\tbackground-color:yellow;\n}\n</style>\n\n<div>\n<p>段落 1。 在 div 中。</p>\n<p>段落 2。 在 div 中。</p>\n</div>\n\n<p>段落 3。不在 div 中。</p>\n<p>段落 4。不在 div 中。</p>\n```\n\n<img src=\"https://raw.githubusercontent.com/Mooyi646/ImageSaver/main/202207311311428.png\" alt=\"image-20220731131103323\" style=\"zoom:67%;\" />\n\n#### 子元素选择器\n\n只能选择作为某元素<span style=\"background-color:#E0FFFF\">直接/一级子元素的元素</span>，大于符号`>`分隔。\n\n\n```html\n<style>\ndiv>p\n{\n\tbackground-color:yellow;\n}\n</style>\n\n<h1>Welcome to My Homepage</h1>\n<div>\n\t<h2>My name is Donald</h2>\n\t<p>I live in Duckburg.</p>//highlight\n</div>\n\n<div>\n\t<span><p>I will not be styled.</p></span>//no highlight with the first child \"span\"\n    <p><span>I will be styled.</span></p>//highlight because \"p\" is the first child\n</div>\n\n<p>My best friend is Mickey.</p>\n```\n\n<img src=\"https://raw.githubusercontent.com/Mooyi646/ImageSaver/main/202207311322609.png\" alt=\"image-20220731132236565\" style=\"zoom: 50%;\" />\n\n#### 相邻兄弟选择器\n\n选择<span style=\"background-color:#E0FFFF\">**紧接**在另一元素后的元素，且二者有相同父元素</span>，用`+`分隔。\n\n```html\n<style>\ndiv+p\n{\n\tbackground-color:yellow;\n}\n</style>\n\n<div>\n<h2>DIV 内部标题</h2>\n<p>DIV 内部段落。</p>\n</div>\n\n<p>DIV 之后的第一个 P 元素。</p>//adjacent to the \"div\"\n\n<p>DIV 之后的第二个 P 元素。</p>\n```\n\n<img src=\"https://raw.githubusercontent.com/Mooyi646/ImageSaver/main/202207311326422.png\" alt=\"image-20220731132642385\" style=\"zoom:67%;\" />\n\n\n\n#### 后续兄弟元素\n\n后续兄弟选择器选取<span style=\"background-color:#E0FFFF\">所有指定元素**之后**的相邻兄弟元素</span>。用`~`隔开。\n\n```html\n<style>\ndiv~p\n{\n\tbackground-color:yellow;\n}\n</style>\n\n<p>之前段落，不会添加背景颜色。</p>\n<div>\n<p>段落 1。 在 div 中。</p>\n<p>段落 2。 在 div 中。</p>\n</div>\n\n<p>段落 3。不在 div 中。</p>\n<p>段落 4。不在 div 中。</p>\n```\n\n<img src=\"https://raw.githubusercontent.com/Mooyi646/ImageSaver/main/202207311331016.png\" alt=\"image-20220731133141976\" style=\"zoom: 67%;\" />\n\n\n\n\n\n\n### 插入样式表\n\n#### 外部样式表(external style sheet)\n\n  一般用于*同一样式需用于很多页面*，通过mystyle.css文件改变站点整体样式【页面使用`<link>`标签链接到样式表，该标签位于文档头部`<head>`中】\n\n  `<link rel=\"stylesheet\" href=\"mystyle.css\">`\n\n#### 内部样式表(internal style sheet)\n\n  一般用于*单个文件*，利用`<style>`标签在头部文件内部定义。\n\n  <img src=\"https://raw.githubusercontent.com/Mooyi646/ImageSaver/main/202207291021544.png\" alt=\"image-20220729102140460\" style=\"zoom: 80%;\" />\n\n#### 内联样式(inline style)\n`<p style=\"color:sienna;margin-left:20px\">text</p>`\n\n<p style=\"color:sienna;margin-left:20px\">text</p>\n\n**Atten:<span style=\"background-color:#ADFF2F\">多重样式优先级</span>**\n内联>内部>外部>默认\n\n\n\n### 背景\n\n- background-color\n- background-image\n- background-repeat：水平或垂直方向平铺或不平铺(repeat-x/repeat-y/no-repeat)\n- background-attachment：是否固定/滚动\n- background-position：起始位置\n\n背景可简写属性，属性顺序如上顺序，属性可不全部使用。\n\n`body {background:#ffffff url('img_tree.png') no-repeat right top;}`\n\n\n\n### 对齐\n\n* 元素居中对齐\n\n使用`margin: auto`\n\n图片居中对其需放入块元素中\n\n\n\n* 文本居中对齐\n\n`text-align: center`\n\n\n\n* 左右对齐-定位\n\n`position:absolute`\n\n注释：绝对定位元素会被从正常流中删除，并且能够交叠元素。\n\n**Atten:** 当使用 **position** 来对齐元素时, 通常`<body>`元素会设置 **margin** 和 **padding** 。 这样可以避免在不同的浏览器中出现可见的差异。\n\n\n\n* 左右对齐-float\n\n`float:left/right`\n\n**Atten**：如果子元素的高度大于父元素，且子元素设置了浮动，那么子元素将溢出，这时候你可以使用 \"***clearfix***(清除浮动)\" 来解决该问题。可以在父元素上加`overflow:auto`来解决子元素溢出。\n\n\n\n* 垂直居中-padding\n\n```css\n.center {\n    padding: 70px 0;//水平居中\n    border: 3px solid green;\n    text-align: center;//垂直居中\n}\n```\n\n\n\n* 垂直居中-line-height\n\n```css\n.center {\n    line-height: 200px;\n    height: 200px;\n    border: 3px solid green;\n    text-align: center;\n}\n \n/* 如果文本有多行，添加以下代码: */\n.center p {\n    line-height: 1.5;\n    display: inline-block;\n    vertical-align: middle;\n}\n```\n\n\n\n* 垂直居中-position&transform\n\n```css\n.center { \n    height: 200px;\n    position: relative;\n    border: 3px solid green; \n}\n \n.center p {\n    margin: 0;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n}\n```\n\n\n\n### 伪类(Pseudo-classes)&伪元素\n\n#### 伪类\n\n伪类语法：`selector:pseudo-class {property:value;}`\n\nCSS类使用伪类：`selector.class:pseudo-class {property:value;}`\n\n#### 伪元素\n\n语法：`selector:pseudo-element {property:value;}`\n\nCSS类使用伪元素：`selector.class:pseudo-element {property:value;}`\n\n\n\n<a href=\"https://www.runoob.com/css/css-tutorial.html\">其余相关内容请点击查看。</a>\n\n\n\n***\n\n\n\n\n\n## JavaScript\n\nJavaScript是一种脚本语言，控制了网页的行为，插入HTML页面后，由浏览器执行。\n\n浏览器逐行读取并执行代码(不是先全部编译再执行)。\n\n\n\n### 使用\n\n* 在HTML文件页中使用`<script>...</script>`标签。\n\n  Atten:一般放在head中或页面底部(body)\n\n* HTML文件可使用外部的.js文件，利用script标签的<span style=\"color:red\">src</span>属性\n\n  `<script src=\"myScript.js\">...</script>`\n\n使用时，为`事件=函数名()`.\n\n\n\n### 输出/显示数据\n\n* window.alert()弹出警告\n```js\n<script>\n\twindow.alert(2);\n\t</script>\n```\n\n* document.write()将内容写入HTML文档\n\n```js\n  <script>\n  document.write(\"11\");\n  </script>\n```\n\n\n  **Atten**:仅向文档输出写内容，<span style=\"background-color:#E0FFFF\">若在文档加载完成后执行，整个页面将被覆盖</span>。\n\n  <span style=\"background-color:#E0FFFF\">Example</span>\n\n```js\n\t<button onclick=\"test()\">test1</button>\n\t<script>\n\t document.write(\"document1\");\n\t \tfunction test(){\n\t \tdocument.write(\"refreshing\");\n\t \t}\n\t </script>\n```\n\n   result:<img src=\"https://raw.githubusercontent.com/Mooyi646/ImageSaver/main/202207312149397.png\" alt=\"image-20220731212404112\" style=\"zoom:67%;\" />\n\n   After clicking the botton:<img src=\"https://raw.githubusercontent.com/Mooyi646/ImageSaver/main/202207312150251.png\" alt=\"image-20220731213114137\" style=\"zoom:80%;\" />\n\n\n* innerHTML写入到HTML文档中\n\n```js\n   <script>\n   document.getElementById(\"id1\").innerHTML=\"new text\";\n   </script>\n```\n\n* console.log()写入到控制台\n\n```js\n   <script>\n   console.log(2);\n   </script>\n```\n\n   一般为利用浏览器进行调试。\n\n   \n\n### 语法\n\n#### 字面量(固定值)\n\n* 数字(Number)：整数/小数`3.14`\n\n* 字符串(String)：单引号/双引号`'text'`/`\"text\"`\n\n  * 可使用索引位置访问单个字符\n  * 字符串中可含引号，不能与字符串的相同/使用转义字符`\\'`or`\\\"`以使用引号\n  * 可使用.length计算长度\n  * 可使用new关键字将字符串定义为对象\n\n* 表达式：`1+1`\n\n* 数组(Array)：`[1,2,3]`/`['apple','orange']`\n\n* 对象(Object)：`{key1:\"value1\",key2:\"value2\"}`，可跨行定义\n\n  访问对象属性：\n\n  ```js\n  var person={\n      name:\"Lee\",\n      age:\"22\",\n      information:function(){\n      return \"name:\"+this.name+\" \"+\"age:\"+this.age;\n  }};\n  //access attributes1\n  person.name;\n  //access attributes2\n  person[\"name\"];\n  //access function\n  var infor=person.information();//without(),the strings of \"information\" will be displayed\n  ```\n\n  \n\n* 函数(Function)：`function myFunction(){}`\n\n\n\n#### 数据类型\n\n<img src=\"https://raw.githubusercontent.com/Mooyi646/ImageSaver/main/202207312329738.png\" alt=\"image-20220731232911606\" style=\"zoom: 67%;\" />\n\n\n\n#### 变量\n\n使用关键字<span style=\"color:red\">var</span>定义变量，`var a=1;`\n\n* 变量名使用驼峰命名法，大小写敏感。\n\n* 变量声明`var name;`,此时name的值为undefined\n\n* 重新声明变量，其值不会丢失\n\n* JS拥有动态类型，相同变量可作不同类型\n\n* const关键字定义常量，声明时初始化`const x=10;`，作用域与let相似\n\n  <mark>Atten</mark>：const定义的并不是严格意义上的常量，它定义了一个常量引用一个值。使用 const 定义的对象或者数组，其实是可变(<span style=\"color:red\">可修改/增加元素，不可重新赋值</span>)的。\n\n  ```js\n  const person={name:\"Lee\",age:\"22\"};//常量对象\n  person.name=\"Ham\";//修改属性\n  person.location=\"xxx\";//添加属性\n  //不可对常量对象重新赋值\n  //person={name:\"Ham\",age:\"22\"} //wrong\n  ```\n\n  可以使用Object.freeze()来冻结变量放置修改。\n\n##### 变量作用域\n\n* 函数体外声明的变量为全局变量，函数内声明的变量为局部变量(var)\n\n* <span style=\"color:green\">在块中声明var变量，其在块外依然可被访问</span>\n\n  <img src=\"https://raw.githubusercontent.com/Mooyi646/ImageSaver/main/202207312223668.png\" alt=\"image-20220731222319625\" style=\"zoom: 80%;\" />\n\n* 使用<span style=\"background-color:#B4EEB4\">let</span>关键字可实现只在块内有效\n\n  <img src=\"https://raw.githubusercontent.com/Mooyi646/ImageSaver/main/202207312225564.png\" alt=\"image-20220731222514523\" style=\"zoom:80%;\" />\n\n* 重新定义变量\n\n  * var：可在任意地方修改,<img src=\"https://raw.githubusercontent.com/Mooyi646/ImageSaver/main/202207312231711.png\" alt=\"image-20220731223151672\" style=\"zoom:67%;\" />\n  * let：<img src=\"https://raw.githubusercontent.com/Mooyi646/ImageSaver/main/202207312231209.png\" alt=\"image-20220731223135155\" style=\"zoom:67%;\" />\n  * 相同作用域/块级作用域中，不能用let关键字重置var/let声明的变量\n  * 相同作用域/块级作用域中，不能用 var关键字重置let声明的变量\n  * 相同作用域/块级作用域中，不能用 const关键字重置var/let/const声明的变量\n\n* 使用var声明的全局变量<span style=\"background-color:#FFC1C1\">属于window对象</span>.\n\n* 使用let声明的全局变量<span style=\"background-color:#FFC1C1\">不属于window对象</span>.\n\n* <span style=\"color: #FF8247\"><b>var变量可以先使用再声明(作为全局变量，可删除)，let变量必须声明才能使用。</b></span>\n\n\n\n#### 语句\n\n* 语句自动忽略多余空格\n\n* 语句以，分隔\n\n* 可在文本字符串中使用反斜杠对代码换行\n\n  ```js\n  document.write(\"hello\\\n  world!\");\n  ```\n\n* 注释为`//`与`/*...*/`\n\n##### 比较运算符\n\n![image-20220731231259574](https://raw.githubusercontent.com/Mooyi646/ImageSaver/main/202207312312796.png)\n\n\n\n##### For/In循环\n\n遍历对象属性\n\n  ```js\nvar infor;\nvar person={name:\"Ham\",age:22};\nfor(x in person){//x为属性名\n    infor=person[x]+\" \";\n}\n//infor=Ham 22 ;\n  ```\n\n\n\n##### Typeof/null/undefined\n\n* typeof可用于检测变量的数据类型，`typeof  'Ham'`/`typeof 3.14\t`\n\n* NaN的数据类型为number\n\n* Atten:数组时对象的特殊类型，所以`typeof Array/Date`返回对象\n\n  * constructor属性返回所有JS变量的<mark>构造函数</mark>\n\n  * 通过constructor判断类型：检验返回值是否包含相应字符串\n\n\n  ```js\nfunction isArray(arr){\n    return arr.constructor.toString().indexOf(\"Array\")>-1;\n}\n  ```\n\n\n\n\n* null 表示空对象引用，`typeof null`返回对象\n\n* 可以利用null来清空对象\n\n* undefined表示未设置值的变量，`typeof 未设置值的变量`返回undefined\n\n* 可以利用undefined来清空变量\n\n* <span style=\"color:orange\"> null== undefined //true</span>\n\n  <span style=\"color:orange\">  null===undefined //false </span>\n\n\n\n##### 类型转换\n\n* 数字->字符串\n\n  * String(number) `String(123)`\n  * Number.toString() `(123).toString()`\n\n* 布尔值->字符串\n\n  * String(false)\n  * false.toString()\n  * <a href=\"https://www.runoob.com/jsref/jsref-obj-number.html\">更多请参考</a>\n\n* 日期->字符串\n\n  * String(new Date())\n  * Date.toString() `obj.toString()`\n  * <a href=\"https://www.runoob.com/jsref/jsref-obj-date.html\">更多请参考</a>\n\n* 字符串->数字\n\n  * Number(\"3.00\")//3.00\n\n    Number(\"isd\")//NaN：非数字值\n\n  * parseFloat()\n\n  * parseInt()\n\n* 一元运算符+：将变量转换为数字\n\n\n  ````js\n  var a=\"1\";\n  var b+=a;//b是一个数字1\n  var c=\"hdai\";\n  var d+=c;//d为数字，值为NaN\n  ````\n\n\n\n\n* 日期->数字\n\n  * Number(new Date())\n  * Date.getTime()\n\n* 自动转换\n\n  <img src=\"https://raw.githubusercontent.com/Mooyi646/ImageSaver/main/202207312347452.png\" alt=\"image-20220731234708405\" style=\"zoom:80%;\" />\n\n* 自动转换为字符串\n\n  尝试输出一个对象或一个变量时 JavaScript 会自动调用变量的 toString() 方法\n\n<a href=\"https://www.runoob.com/js/js-type-conversion.html\">更多请查看</a>\n\n\n\n### 正则表达式(Regular Expression/regex/regexp/RE)\n\n* 正则表达式是由一个字符序列形成的搜索模式。\n\n* 当你在文本中搜索数据时，你可以用搜索模式来描述你要查询的内容。\n\n* 正则表达式可以是一个简单的字符，或一个更复杂的模式。\n\n* 正则表达式可用于所有文本搜索和文本替换的操作。\n\n#### 语法\n\n`/正则表达式主体/修饰符(可选)`\n\n主体用于检索，不区分大小写\n\n* 修饰符\n  * i： 执行对大小写不敏感的匹配。\n  * g：执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。\n  * m：执行多行匹配。\n\n#### 使用字符串方法\n\n* search()\n\n  检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。可使用字符串作参数（自动转化为正则表达式）。\n\n\n  ```js\n  var str=\"HelloWorld\";\n  var n=str.search(/World/i);//n=5\n  var m=str.search(\"World\");//字符串参数自动转化为正则表达式,m=5\n  ```\n\n\n\n* replace()\n\n  使用正则表达式且不区分大小写将字符串中的A替换为B，可使用字符串作参数\n\n\n  ```js\n  var str=\"HelloWorld\";\n  var text=str.replace(/world/i,\"JS\");//text=\"HelloJS\"\n  var text1=str.replace(\"World\",\"JS\");\n  ```\n\n\n\n#### 正则表达式模式\n\n* 方括号用于查找某个范围内的字符\n\n  <img src=\"https://raw.githubusercontent.com/Mooyi646/ImageSaver/main/202208010007126.png\" alt=\"image-20220801000731016\" style=\"zoom:90%;\" />\n\n* 元字符拥有特殊含义\n\n  <img src=\"https://raw.githubusercontent.com/Mooyi646/ImageSaver/main/202208010008921.png\" alt=\"image-20220801000804874\" style=\"zoom:80%;\" />\n\n* 量词\n\n  <img src=\"https://raw.githubusercontent.com/Mooyi646/ImageSaver/main/202208010008243.png\" alt=\"image-20220801000823200\" style=\"zoom:90%;\" />\n\n\n\n#### RegExp对象\n\n一个预定义了属性和方法的正则表达式对象。\n\n##### test()\n\n用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。\n\n\n  ``` js\n/e/.test(\"hello\");//true\n  ```\n\n##### exec()\n\n用于检索字符串中的正则表达式的匹配。该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。\n\n  ```js\n/e/.exec(\"hello\");//输出e\n  ```\n\n\n\n<a href=\"https://www.runoob.com/jsref/jsref-obj-regexp.html\">更多有关RegExp请参考</a>","tags":["front-end","studying","coding"],"categories":["Learning","front-end"]},{"title":"不同年纪对应的音乐喜爱度变化","url":"/post/7b89dc1f.html","content":"\n\n\n随着年纪的增加，对不同音乐的喜好程度有了很大变化。\n\n <!-- more -->\n\n## 听歌软件的使用\n\n  最开始用的是咪咕音乐，后面开始用酷我音乐，然后开始用酷狗音乐，过渡到QQ音乐，网易云音乐，Apple Music以及现在用得较多的Spotify。\n\n\n\n## 小学期间\n\n  应该算是到了五年纪才有了自己找歌听的意识，在此之前都是被动地接受别人所放的歌曲。自己找歌听听得最多的是什么呢？徐良、许嵩、汪苏泷，也就是现在的所谓的童年”三巨头“。三人比较的话听得最多的应该是徐良，当时非常痴迷他和孙雨幽的合唱。\n\n《情话》这张专的好多歌我都还会唱，前段时间宿舍放歌放童年回忆歌曲，放到他们的歌我还能完整唱出来，不得不说确实算是刻在了我的脑子中。\n\n  其二就是许嵩，听许嵩其实应该算是受到一个发小的影响，当时没有什么自己找歌听的概念，一般是看到别人做什么就开始跟着听，但是好像几乎全是有关感情的歌，为什么小学生喜欢听这个？\n\n  汪苏泷其实好像就听了一两首，记忆最深的是小星星，现在也还会唱。\n\n  因为当时比较喜欢宋茜还听了挺多fx的歌来着，现在连歌名是什么都忘记了。\n\n\n\n## 初中\n\n  刚进入初中最开始其实还是保留小学的审美，后面因为主流审美的变化以及接触到了不同的同学才开始有所变化。\n\n  受湖南卫视我是歌手的影响，其实听到了很多算还不错的歌，刚刚去重新登录了酷我的账号，发现列表里几乎都是我是歌手里的歌以及一些电影主题曲。\n\n  受身边好朋友以及当时主流追星的影响，听了当时的TFBOYS的几乎全部歌曲，后面开始追韩国男团女团，听了当时的BTS以及GOT7的很多歌，也听了几首Bigbang的，现在几乎全忘了。\n\n  受身边一个朋友的影响开始听英文歌曲，听的第一个歌手应该是Taylor Swift，因为当时朋友很喜欢她。后面比较喜欢欧美音乐，开始了自己探索，大量听欧美歌曲，听b榜的歌曲，当时非常喜欢断眉，那个时期他发行的所有单曲都会唱。也很喜欢霉霉，不过好像只听了部分，最喜欢的是1989这张专，还记得当时QQ音乐这张专要付费，我还买了。\n\n\n\n## 高中\n\n  高中其实是初中的延续以及自己探索的延续。保留了听欧美的耳朵，不断听欧美流行歌曲，逐渐从断眉转变到喜欢萌德(Shawn Mendes)，后面觉得他从阳光大男孩转变到油腻大叔了以及出的专奇奇怪怪就放弃了(说的就是你senorita).但是还是一直在听欧美流行。\n\n  逐渐找到自己喜欢的歌曲的样子，开始听country music以及一些杂七杂八不同语言的歌曲。\n\n  过渡到后面非常喜欢看歌舞相关电影，开始听电影插曲，列表几乎全是pitch perfect 1-3以及High School Musical 1-3(歌舞青春)相关歌曲。偶尔穿插一切华语歌曲。\n\n  找到自己喜欢的电影的类型——歌舞剧，从现在来看也就是musical的电影拍摄版，开始大量看电影以及听里面的曲子，Moulin Rouge(红磨坊)，The Greatest Showman(马戏之王)，以及其他很有名的音乐剧的电影出品版。\n\n  一般而言是电影带动了我的曲库，有几个相反的算是：\n\n1. Try - Asher Monroe，真的太好听，因为这首歌去看的Fame\n2. Way back into love - Haley Bennett&Hugh Grant，非常非常喜欢电影demo版，真的很甜，所以去看了Music and Lyrics(K歌情人)\n\n  真的非常感谢声入人心这个节目，真的明白与找到了心中所爱，开始真正看音乐剧，第一部剧应该是Rent，其实应该也是Seasons of love吸引我去看的这部剧，真的入股不亏！\n\n\n\n## 大学\n\n  延续了高中的音乐剧，时间、资源充足所以较大量看剧，歌单几乎全是宽街原声。\n\n  大一考试周狠狠emo开始听五月天，也开始从网易云过渡到QQ音乐和Spotify，直到现在。\n\n\n\n## Some thoughts\n\n* 音乐真的是很私人的东西，每个人的口味都不太相同，献上我给朋友推荐音乐剧的图。\n\n  <img src=\"https://raw.githubusercontent.com/Mooyi646/ImageSaver/main/202207271017461.jpg\" alt=\"img\" style=\"zoom: 50%;\" />\n\n* 所有音乐都不分高低贵贱，自己喜欢即可。\n\n* 音乐口味的变化真的很神奇，现在去听我高一的歌单，我甚至会生出”我当时怎么去听这首歌并把它加入我的歌单“的想法。\n\n\n\n希望所有人都能找到自己喜欢的音乐！;-)","tags":["thoughts","Music"],"categories":["Let's think","Music"]},{"title":"关于拖延以及失去动力","url":"/post/72693323.html","content":"\n  这是从大二上一直到这学期期末周末尾都给自己定下的目标，没有想过现在才实现，也没有想过现在居然实现了。\n\n <!-- more -->\n\n  上大学以来一直都是行动力底下。高中的自己还能夸夸自己说“我觉得我的自制力还算不错啊”，到大学过后，从不敢说出这话了。\n\n  两年了，说什么事情也没做成的话，倒也是给自己的人生转了个弯。从工商管理大类到了如今的软工，你说没付出努力，别人说你骗谁呢，说我真的努力了啊，我说这是骗自己啊。\n\n  经常会想到底是什么让我失去了动力，亦或者说是向上的精神与对等的行动。我不知道。高中真的算是过得最快乐的三年的吧，中考的幸运延续，使得高中初始就算站在了还不错的起点，然后一直保持，偶尔徘徊，偶尔向上，总体都还算不错，为什么大学就截然不同了呢？或许是我没有从一开始就在相对的高处吧，我又怎么能够站得到高处呢？\n\n  总归是絮絮叨叨，实力与行动配不上自己的“野心”，确实是“卷也卷不赢，摆也不敢摆”。","tags":["thoughts","doer","procrastination"],"categories":["Let's think","Life"]}]